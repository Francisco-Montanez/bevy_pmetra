# Architectire for a CAD builders.

# diagram settings...
direction: down

# heading...
Architecture - CAD Builders: {
  shape: text
  near: top-center
  style: {
    font-size: 55
  }
}

# impl traits on Params...
ParametricCad: {
  build_cad_meshes: |rust
    fn build_cad_meshes(
      &self, /// Params
      textures: CadMaterialTextures<Option<Image>>
      ) -> Result<CadMeshes> 
  |
  build_cad_meshes_from_shells: |rust
    fn build_cad_meshes_from_shells(
      &self, /// Params
      shells: CadShells,
      textures: CadMaterialTextures<Option<Image>>,
    ) -> Result<CadMeshes>;
  |
  # connections...
  build_cad_meshes -> build_cad_meshes_from_shells
}
ParametricModelling: {
  build_shells: |rust
    fn build_shells(
      &self /// Params
    ) -> Result<CadShells>;
  |
}
# structs...
CadShellsBuilder: {
  new: |rust
    fn new(
      params: P
    ) -> Result<Self>
  |

  add_shell: |rust
    fn add_shell(
      &mut self,
      shell_name: String,
      build_fn: fn(&Self) -> Result<CadShell>,
    ) -> Result<Self>
  |

  build: |rust
    fn build(
      &self
    ) -> Result<CadShells>
  |
  # connections...
  new -> add_shell -> build
}
CadTaggedElements: |rust
  struct CadTaggedElements(
    pub HashMap<
      CadElementTag, 
      CadElement
    >
  );
|
CadMeshesBuilder: {
  new: |rust
    fn new(
      params: P,
      shells: CadShells,
      textures: CadMaterialTextures<Option<Image>>,
    ) -> Result<Self>
  |

  add_mesh: |rust
    fn add_mesh(
      &mut self,
      shell_name: String,
      mesh_name: String,
      build_fn: fn(&Self, 
        &CadShell, 
        &CadMaterialTextures<Option<Image>>
        ) -> Result<CadMesh>,
    ) -> Result<Self> 
  |

  build: |rust
    fn build(
      &self
    ) -> Result<CadMeshes>
  |
  # connections...
  new -> add_mesh -> build
}
CadMeshBuilder: {
  new: |rust
    fn new(params: P, 
      shell: CadShell
    ) -> Result<Self>
  |

  set_bevy_mesh: |rust
    fn set_bevy_mesh(
      &mut self, 
      mesh: Mesh
    ) -> Result<Self>
  |

  set_base_material: |rust
    fn set_base_material(
      &mut self, 
      material: StandardMaterial
    ) -> Result<Self>
  |

  set_material_texture_set: |rust
    fn set_material_texture_set(
        &mut self,
        material_texture_set: CadMaterialTextureSet<
          Option<Image>
        >,
    ) -> Result<Self>
  |
  set_transform: |rust
    fn set_transform(
      &mut self, 
      transform: Transform
    ) -> Result<Self>
  |
  set_outlines: |rust
    fn set_outlines(
      &mut self, 
      outlines: CadMeshOutlines
    ) -> Result<Self>
  |
  add_cursor: |rust
    fn add_cursor(
        &mut self,
        cursor_name: String,
        build_fn: fn(&Self, &CadShell) -> Result<CadCursor>,
    ) -> Result<Self>
  |
  build: |rust
    fn build(
      &self
    ) -> Result<CadMesh>
  |
  # connections...
  new -> set_bevy_mesh -> set_base_material -> set_outlines -> set_transform -> add_cursor -> build
}
CadCursor: |rust
  struct CadCursor {
    pub normal: Vec3,
    pub transform: Transform,
    pub cursor_radius: f32,
    pub cursor_type: CadCursorType,
  }
|
# connections...
ParametricCad.build_cad_meshes -> ParametricModelling.build_shells
ParametricModelling.build_shells -> CadShellsBuilder.new
CadShellsBuilder.add_shell -> CadTaggedElements
ParametricCad.build_cad_meshes_from_shells -> CadMeshesBuilder.new
CadMeshesBuilder.add_mesh -> CadMeshBuilder.new
CadMeshBuilder.add_cursor -> CadCursor
